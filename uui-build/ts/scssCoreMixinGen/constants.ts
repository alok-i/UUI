import { TFigmaThemeName } from '../figmaTokensGen/types/sharedTypes';
import { PATH } from '../figmaTokensGen/constants';

const THEME_DIR = './epam-assets/theme';

export const tokensFile = PATH.FIGMA_VARS_COLLECTION_OUT_TOKENS;
export const coreThemeMixinsConfig: Record<TFigmaThemeName, { themeFile: string, mixinsFile: string }> = {
    [TFigmaThemeName.EPAM]: {
        themeFile: `${THEME_DIR}/theme_electric.scss`,
        mixinsFile: `${THEME_DIR}/theme_electric_mixins.scss`,
    },
    [TFigmaThemeName.PROMO]: {
        themeFile: `${THEME_DIR}/theme_promo.scss`,
        mixinsFile: `${THEME_DIR}/theme_promo_mixins.scss`,
    },
    [TFigmaThemeName.LOVESHIP_LIGHT]: {
        themeFile: `${THEME_DIR}/theme_loveship.scss`,
        mixinsFile: `${THEME_DIR}/theme_loveship_mixins.scss`,
    },
    [TFigmaThemeName.LOVESHIP_DARK]: {
        themeFile: `${THEME_DIR}/theme_loveship_dark.scss`,
        mixinsFile: `${THEME_DIR}/theme_loveship_dark_mixins.scss`,
    },
};

export const coreMixinGenTemplate = (
    params: {
        scssVars: Map<string, string>,
        cssVars: Map<string, string>,
        errors: string,
    },
): string => {
    const mixinName = 'theme_core-mixin';
    const {
        scssVars = new Map(),
        cssVars = new Map(),
        errors,
    } = params;

    const mapToSortedArr = (map: Map<string, unknown>) => {
        return [...map.entries()].sort((e1, e2) => e1[0].localeCompare(e2[0]));
    };

    const indent1 = new Array(4).fill(' ').join('');
    const scssVarsStr = mapToSortedArr(scssVars).map(([name, value]) => {
        return `$${name}: ${value};`;
    }).join('\n');
    const cssVarsStr = mapToSortedArr(cssVars).map(([name, value]) => {
        return `${indent1}${name}: ${value};`;
    }).join('\n');

    return [
        '// This file is AUTOGENERATED don\'t edit manually.',
        '',
        errors,
        '',
        scssVarsStr,
        '',
        `@mixin ${mixinName} {`,
        cssVarsStr,
        '}',
        '',
    ].join('\n');
};
